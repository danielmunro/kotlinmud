plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.0'

    id 'application'

    id 'maven-publish'

    id 'jacoco'

    id 'org.sonarqube' version '2.8'
}

apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.5"
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

subprojects {
    test.useTestNG()
}

jacocoTestReport {
    reports {
        xml.enabled = true
    }
}

def env = System.getenv()

sonarqube {
    properties {
        property "sonar.projectKey", "danielmunro_kotlinmud"
        property "sonar.organization", "danielmunro-github"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", env["SONARCLOUD"]
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", file("${rootProject.projectDir}/build/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacocoTestReport.dependsOn {
    subprojects*.test
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile).all {
    kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"]
}

dependencies {
    // coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.2'

    // postgres
    implementation 'org.postgresql:postgresql:42.3.6'

    // fake data
    implementation 'io.github.serpro69:kotlin-faker:1.11.0'

    // orm
    implementation 'org.jetbrains.exposed:exposed:0.17.14'

    // Align versions of all Kotlin components
    implementation 'org.jetbrains.kotlin:kotlin-bom'

    // Use the Kotlin JDK 8 standard library.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.0'

    // container DI
    implementation 'org.kodein.di:kodein-di-erased:6.5.5'

    implementation 'com.thinkinglogic.builder:kotlin-builder-annotation:1.2.1'

    kapt 'com.thinkinglogic.builder:kotlin-builder-processor:1.2.1'

    implementation 'com.github.cesarferreira:kotlin-pluralizer:0.2.9'

    implementation "com.github.Commit451:mailgun:1.2.0"

    implementation 'io.github.cdimascio:java-dotenv:5.2.2'

    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.13.3'

    // exposed orm + sqlite or postgres
    implementation 'org.jetbrains.exposed:exposed-core:0.38.2'
    implementation 'org.jetbrains.exposed:exposed-dao:0.38.2'
    implementation 'org.jetbrains.exposed:exposed-jdbc:0.38.2'
    implementation 'org.xerial:sqlite-jdbc:3.36.0.3'
    implementation 'org.postgresql:postgresql:42.3.6'
    implementation 'com.h2database:h2:2.1.212'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'

    // Use the Kotlin test library.
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    // Use the Kotlin JUnit integration.
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    // assertions
    testImplementation 'com.willowtreeapps.assertk:assertk-jvm:0.25'

    implementation "com.tylerthrailkill.helpers:pretty-print:2.0.2"

    implementation 'io.mockk:mockk:1.12.4'

    implementation 'io.konform:konform-jvm:0.4.0'

    implementation 'com.tinder.statemachine:statemachine:0.2.0'
}

application {
    // Define the main class for the application.
    mainClassName = project.hasProperty('analyze') ?
            'kotlinmud.AnalyzeAppKt' :
            'kotlinmud.AppKt'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
    }
}
